CS 224
EMRE KARATAS
22001641
Section -  03
LAB 05

module basys3(input  logic clk, reset, clk_button,  
          output logic [6:0]seg,
	     output logic [3:0]an,
	     output logic dp,	     
	     output logic MemWriteD, RegWriteD
    );
    
    logic[31:0]instrF,PC, PCF;
    logic PcSrcD; 
    logic ForwardAD;
    logic ForwardBD;
    logic MemtoRegD;
    logic ALUSrcD;
    logic [2:0]  alucontrol;
    logic [31:0] instrD, ALUOutE, WriteDataE;
    logic [1:0] ForwardAE, ForwardBE;
    logic [31:0] SrcAE,SrcBE;
    logic BranchD;
    logic ALURDSrc;
    logic RegDstD;
    
   display_controller display(clk,PCF[7:4],PCF[3:0],instrF[7:4],instrF[3:0], seg, dp,an );
   pulse_controller clkres(clk, reset, 1'b0,reset_new);
   pulse_controller clkbut(clk, clk_button, 1'b0,clk_new);
    
    topMips  topMipFile(clk_new, reset_new,instrF,PC, PCF,PcSrcD, MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
             alucontrol,instrD, ALUOutE, WriteDataE, ForwardAE, ForwardBE,
             ForwardAD, ForwardBD,SrcAE,SrcBE,ALURDSrc);
endmodule



module display_controller(
input clk,
input [3:0] in3, in2, in1, in0,
output [6:0]seg, logic dp,
output [3:0] an
);

localparam N = 18;

logic [N-1:0] count = {N{1'b0}};
always@ (posedge clk)
count <= count + 1;

logic [4:0]digit_val;

logic [3:0]digit_en;
always@ (*)

begin
digit_en = 4'b1111;
digit_val = in0;

case(count[N-1:N-2])

2'b00 :	//select first 7Seg.

begin
digit_val = {1'b0, in0};
digit_en = 4'b1110;
end

2'b01:	//select second 7Seg.

begin
digit_val = {1'b0, in1};
digit_en = 4'b1101;
end

2'b10:	//select third 7Seg.

begin
digit_val = {1'b0, in2};
digit_en = 4'b1011;
end

2'b11:	//select forth 7Seg.

begin
digit_val = {1'b0, in3};
digit_en = 4'b0111;
end
endcase
end

//Convert digit number to LED vector. LEDs are active low.

logic [6:0] sseg_LEDs;
always @(*)
begin
sseg_LEDs = 7'b1111111; //default
case( digit_val)
5'd0 : sseg_LEDs = 7'b1000000; //to display 0
5'd1 : sseg_LEDs = 7'b1111001; //to display 1
5'd2 : sseg_LEDs = 7'b0100100; //to display 2
5'd3 : sseg_LEDs = 7'b0110000; //to display 3
5'd4 : sseg_LEDs = 7'b0011001; //to display 4
5'd5 : sseg_LEDs = 7'b0010010; //to display 5
5'd6 : sseg_LEDs = 7'b0000010; //to display 6
5'd7 : sseg_LEDs = 7'b1111000; //to display 7
5'd8 : sseg_LEDs = 7'b0000000; //to display 8
5'd9 : sseg_LEDs = 7'b0010000; //to display 9
5'd10: sseg_LEDs = 7'b0001000; //to display a
5'd11: sseg_LEDs = 7'b0000011; //to display b
5'd12: sseg_LEDs = 7'b1000110; //to display c
5'd13: sseg_LEDs = 7'b0100001; //to display d
5'd14: sseg_LEDs = 7'b0000110; //to display e
5'd15: sseg_LEDs = 7'b0001110; //to display f
5'd16: sseg_LEDs = 7'b0110111; //to display "="
default : sseg_LEDs = 7'b0111111; //dash 
endcase
end

assign an = digit_en;

assign seg = sseg_LEDs;
assign dp = 1'b1; //turn dp off

endmodule

module pulse_controller(
	input logic CLK, sw_input, clear,
	output logic clk_pulse );

	 logic [2:0] state, nextstate;
	 logic [30:0] CNT; 
	 logic cnt_zero; 

	always @ (posedge CLK, posedge clear)
	   if(clear)
	    	state <=3'b000;
	   else
	    	state <= nextstate;

	always @ (sw_input, state, cnt_zero)
          case (state)
             3'b000: begin if (sw_input) nextstate = 3'b001; 
                           else nextstate = 3'b000; clk_pulse = 0; end	     
             3'b001: begin nextstate = 3'b010; clk_pulse = 1; end
             3'b010: begin if (cnt_zero) nextstate = 3'b011; 
                           else nextstate = 3'b010; clk_pulse = 1; end
             3'b011: begin if (sw_input) nextstate = 3'b011; 
                           else nextstate = 3'b100; clk_pulse = 0; end
             3'b100: begin if (cnt_zero) nextstate = 3'b000; 
                           else nextstate = 3'b100; clk_pulse = 0; end
            default: begin nextstate = 3'b000; clk_pulse = 0; end
          endcase

	always @(posedge CLK)
	   case(state)
		3'b001: CNT <= 100000000;
		3'b010: CNT <= CNT-1;
		3'b011: CNT <= 100000000;
		3'b100: CNT <= CNT-1;
	   endcase

//  reduction operator |CNT gives the OR of all bits in the CNT register	
	assign cnt_zero = ~|CNT;

endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 01.12.2022 04:51:44
// Design Name: 
// Module Name: topMips
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
// You can add some more logic variables for testing purposes
// but you cannot remove existing variables as we need you to output 
// these values on the waveform for grading
module topMips (input  logic        clk, reset,
             output  logic[31:0]  instrF,
             output logic[31:0] PC, PCF,
             output logic PcSrcD,
             output logic MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
             output logic [2:0]  alucontrol,
             output logic [31:0] instrD, 
             output logic [31:0] ALUOutE, WriteDataE,
             output logic [1:0] ForwardAE, ForwardBE,
             output logic ForwardAD, ForwardBD,
             output logic [31:0] SrcAE,SrcBE, 
             output logic ALURDSrc );

    logic [31:0] instr;
	// ********************************************************************
	// Below, instantiate a controller and a datapath with their new (if modified) signatures
	// and corresponding connections.
	// ********************************************************************

	
	
	controller controllerTM(instrD[31:26], instrD[5:0],MemtoRegD, MemWriteD,ALUSrcD,RegDstD, RegWriteD, alucontrol,BranchD, ALURDSrc);
	     
	  datapath dpTM (clk, reset,alucontrol,RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,ALURDSrc, instrF,		
                 instrD, PC, PCF, PcSrcD, ALUOutE, WriteDataE,ForwardAE, ForwardBE,ForwardAD, ForwardBD, SrcAE,SrcBE );  
       imem imem1(PCF[5:0],instr);

endmodule


// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule



module topTB();

    // instance variables
    logic  clk, reset;
    logic[31:0]  instrF;
    logic[31:0] PC, PCF;
    logic PcSrcD;
    logic MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD;
    logic [2:0]  alucontrol;
    logic [31:0] instrD;
    logic [31:0] ALUOutE, WriteDataE;
    logic [1:0] ForwardAE, ForwardBE;
    logic ForwardAD, ForwardBD;
    logic [31:0] SrcAE,SrcBE;
    logic ALURDSrc;
    
    // device under test initialization
    topMips mips(clk, reset,instrF,PC, PCF,PcSrcD,
    MemWriteD, MemtoRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
             alucontrol,
              instrD, 
             ALUOutE, WriteDataE,
             ForwardAE, ForwardBE,
             ForwardAD, ForwardBD,
              SrcAE,SrcBE, 
              ALURDSrc );
    
    // start test
    initial
        begin
        clk = 0;
        reset = 1;
        #10ns; 
        reset = 0;
        end
    
    always
        begin
            #5;
            clk = ~clk;
        end
        
endmodule



module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		
                output logic[31:0] PCF);

                always_ff @(posedge clk, posedge reset)
                    if(reset)
                        PCF <= 0;
                    else if(EN)
                        PCF <= PC;
endmodule


module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule


`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 30.11.2022 22:21:44
// Design Name: 
// Module Name: datapath
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module datapath (input  logic clk, reset,
                input  logic[2:0]  ALUControlD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,ALURDSrc,
                 output logic [31:0] instrF,		
                 output logic [31:0] instrD, PC, PCF,
                output logic PCSrcD,                 
                output logic [31:0] ALUOutEMod, WriteDataE,
                output logic [1:0] ForwardAE, ForwardBE,
                 output logic ForwardAD, ForwardBD,
                 output logic[31:0] SrcAE,SrcBE
               ); // Add or remove input-outputs if necessary

	// ********************************************************************
	// Here, define the wires that are needed inside this pipelined datapath module
	// ********************************************************************
  
  	//* We have defined a few wires for you
    logic [31:0] PcSrcA, PcSrcB, ALUOutE;
    logic [31:0] PcBranchD, PcPlus4F, equll, equl2, adOut;	
  	logic StallF, zero;
  
	//* You should define others down below
    logic [4:0]WriteRegW;
    logic [31:0] PcPlus4D;
    logic [31:0]SignImmD, adderIn;
    logic [31:0]RD1, RD2, RD3, ResultW;
    logic StallD;
    logic equalD;
    logic ALURDSrcE;
    
    //Pipe 3
    
    logic[2:0] ALUControlE;
    logic[4:0] RsE, RtE, RdE, WriteRegE;
    logic RegWriteE; 
    logic MemtoRegE;
    logic MemWriteE;
    logic ALUSrcE;
    logic RegDstE;
    logic[31:0] RsData, RtData,RdData, SignImmE, ALUOutM;
 
    //Pipe 4
    
    logic [4:0] WriteRegM;
    logic RegWriteM;
    logic MemtoRegM; 
    logic MemWriteM;
    logic[31:0] WriteDataM, ReadDataM;
    
    //Pipe5
    logic MemtoRegW;
    logic RegWriteW;
    logic[31:0] ALUOutW,ReadDataW;
    
    
    //hazardnuit 
    logic FlushE;
	// ********************************************************************
	// Instantiate the required modules below in the order of the datapath flow.
	// ********************************************************************

  
  	//* We have provided you with some part of the datapath
    
  	// Instantiate PipeWtoF
  	PipeWtoF pipe1(PC,
                ~StallF, clk, reset,
                PCF);
  
  	// Do some operations
  	adder adder2(PCF, 32'd4,PcPlus4F);
  	mux2 #(32) pc_mux(PcPlus4F, PcBranchD, PCSrcD, PC);


   // imem im1(PCF[5:0], instrF);
    
  	// Instantiate 
  	PipeFtoD pipeNumber2(instrF, PcPlus4F, ~StallD,PCSrcD, clk, reset, instrD,PcPlus4D);
  	
  
  	// Do some operations
     regfile rf1(clk, reset, RegWriteD, instrD[25:21], instrD[20:16],WriteRegW , ResultW,RD1, RD2, RD3); 
     signext signext1(instrD[15:0], SignImmD);
     sl2 sl1(SignImmD, adderIn);
     adder adder3(adderIn, PcPlus4D, PcBranchD);
     
     
     mux2 #(32) muxeqNumber1(RD1,ALUOutM, ForwardAD, equll );
     mux2 #(32) muxeqNumber2(RD2,ALUOutM, ForwardBD, equl2 );
     
     assign equalD = (equll == equl2) ? 1 : 0;
     
     assign PCSrcD = (equalD & BranchD);
  
  	// Instantiate PipeDtoE

     PipeDtoE pipeNumber3(RD1, RD2,RD3, SignImmD, instrD[25:21], instrD[20:16], instrD[15:11], RegWriteD,
                    MemtoRegD, MemWriteD, ALUSrcD, RegDstD, ALUControlD, clk, reset, RsData, RtData, SignImmE,
                     RsE, RtE, RdE, RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE, ALUControlE);                     
  
  	// Do some operations
    mux2 #(5) muxDE1(RtE,RdE,RegDstE,WriteRegE );
    mux4 #(32) muxDE2(RsData,ResultW, ALUOutM, 0, ForwardAE, SrcAE );
    mux4 #(32) muxDE3(RtData,ResultW, ALUOutM, 0, ForwardBE,WriteDataE );
    mux2 #(32) muxDE4(WriteDataE,SignImmE,ALUSrcE,SrcBE );
    alu aluDE(SrcAE, SrcBE, ALUControlE, ALUOutE, zero);
    
    
    mux2 #(32) muxsracDE(ALUOutE,adOut,ALURDSrcE,ALUOutEMod );
    adder adder5(RdData, ALUOutE, adOut); 
    //sracc
    
    
  	// Instantiate PipeEtoM
      PipeEtoM pipeNumber4(clk, reset, WriteRegE, ALUOutEMod, RegWriteE, MemtoRegE, MemWriteE,WriteDataE,ALUOutM, 
      WriteDataM,WriteRegM, RegWriteM, MemtoRegM, MemWriteM);
  
  	// Do some operations

  	dmem dmem1(clk,MemWriteM, ALUOutM, WriteDataM, ReadDataM);

  	// Instantiate PipeMtoW  
  	
    PipeMtoW pipeNumber5(clk,reset,RegWriteM ,MemtoRegM, ALUOutM,  WriteRegM  , 
    ReadDataM, RegWriteW,  MemtoRegW,WriteRegW,ALUOutW, ReadDataW);       
    
  	// Do some operations
  	mux2 #(32) muxNumber5(ALUOutW,ReadDataW,MemtoRegW,ResultW );
  	
  	HazardUnit unitofHazard(RegWriteW, BranchD,WriteRegW, WriteRegE, RegWriteM,MemtoRegM, WriteRegM, RegWriteE,MemtoRegE,
  	RsE,RtE,instrD[25:21],instrD[20:16],ForwardAE,ForwardBE,FlushE,StallD,StallF,ForwardAD, ForwardBD);
  	
  

endmodule

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
always_comb
	case ({addr,2'b00})		   	// word-aligned fetch
	// Test code for no hazards
    8'h00: instr = 32'h20080005;    // addi $t0, $zero, 5              
    8'h04: instr = 32'h2009000c;    // addi $t1, $zero, 12
    8'h08: instr = 32'h200a0006;    // addi $t2, $zero, 6
    8'h0c: instr = 32'h210bfff7;    // addi $t3, $t0, -9
    8'h10: instr = 32'h01288025;    // or $s0, $t1, $t0
    8'h14: instr = 32'h012a8824;    // and $s1, $t1, $t2
    8'h18: instr = 32'h010b9020;    // add $s2, $t0, $t3
    8'h1c: instr = 32'h010a202a;    // slt $a0, $t0, $t2
    8'h20: instr = 32'h02112820;    // add $a1, $s0, $s1
    8'h24: instr = 32'h02493022;    // sub $a2, $s2, $t1
    8'h28: instr = 32'had320074;    // sw $s2, 0x74($t1)
    8'h2c: instr = 32'h8c020080;    // lw $v0, 0x80($zero)
    // address		   instruction
    8'h30: instr = 32'h20080005;   //addi $t0, $zero, 5
    8'h34: instr = 32'h21090007;   //addi $t1, $t0, 7
    8'h38: instr = 32'h210A0002;   //addi $t2, $t0, 2
    8'h3c: instr = 32'h012A5025;   //or $t2, $t1, $t2
    8'h40: instr = 32'h01498024;   //and $s0, $t2, $t1
    8'h44: instr = 32'h01108820;   //add $s1, $t0, $s0
    8'h48: instr = 32'h0151902A;   //slt $s2, $t2, $s1
    8'h4c: instr = 32'h02318820;   //add $s1, $s1, $s1
    8'h50: instr = 32'h02329822;   //sub $s3, $s1, $s2
    8'h54: instr = 32'hAD330074;   //sw $s3, 0x74($t1)
    8'h58: instr = 32'h8C020080;   //lw $v0, 0x80($zero)
    
    //test case for load-use hazards
    8'h5c: instr = 32'h20080005;
    8'h60: instr = 32'hac080000;
    8'h64: instr = 32'h8c090000;
    8'h68: instr = 32'h212a0004;
    8'h6c: instr = 32'h212b0003;
    8'h70: instr = 32'h8d6b0000;
    8'h74: instr = 32'h014b5022;
    8'h78: instr = 32'hac0a0000;
    8'h7c: instr = 32'h8c080000;
    8'h80: instr = 32'h8d090000;
    8'h84: instr = 32'h01094820;
    
    //test case for branch hazard
    8'h48: instr = 32'h20080005;
    8'h48: instr = 32'h20090003;
    8'h30: instr = 32'h1109ffff;
    8'h34: instr = 32'h01285020;
    8'h38: instr = 32'h01094022;
    8'h3c: instr = 32'h2129ffff;
    8'h40: instr = 32'h1128fffb;
    8'h44: instr = 32'hac0a0000;
    8'h48: instr = 32'h01284025;
    8'h48: instr = 32'h0128482a;
    8'h40: instr = 32'h1120fff7;
    8'h44: instr = 32'h8c0b0000;
    8'h48: instr = 32'h01284024;
    8'h48: instr = 32'h1108fff1;
        default:  instr = {32{1'bx}};	// unknown address
    endcase
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 01.12.2022 04:27:47
// Design Name: 
// Module Name: controller
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic[2:0] alucontrol,
                  output logic branch, ALURDSrc);

   logic [1:0] aluop;

  maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, aluop, ALURDSrc);

   aludec  ad (funct, aluop, alucontrol);

endmodule

module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clear, clk, reset,
                output logic[31:0] instrD, PcPlus4D);

                always_ff @(posedge clk, posedge reset)
                  if(reset)
                        begin
                        instrD <= 0;
                        PcPlus4D <= 0;
                        end
                    else if(EN)
                        begin
                        	instrD<=instr;
                        	PcPlus4D<=PcPlus4F;
                            end               
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

module regfile (input    logic clk, reset, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2, rd3);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on falling edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (we3) 
         rf [wa3] <= wd3;
  	 else if(reset)
       for (int i=0; i<32; i++) rf[i] = {32{1'b0}};	

  assign rd1 = (ra1 != 0) ? rf [ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ ra2] : 0;
  assign rd3 = (wa3 != 0) ? rf[ wa3] : 0;
  
  endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 30.11.2022 22:10:49
// Design Name: 
// Module Name: PipeDtoE
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module PipeDtoE(input logic[31:0] RD1, RD2, SignImmD,
                input logic[4:0] RsD, RtD, RdD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,BranchD,
                input logic[2:0] ALUControlD,
                input logic[31:0] PCPlus4D,
                input logic clear, clk, reset,
                output logic[31:0] RsData, RtData, SignImmE,
                output logic[4:0] RsE, RtE, RdE, 
                output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,BranchE,
                output logic[2:0] ALUControlE,
                output logic[31:0] PCPlus4E);

        always_ff @(posedge clk, posedge reset)
        begin
          if(reset)
                begin
                // Control signals
                RegWriteE <= 0;
                MemtoRegE <= 0;
                MemWriteE <= 0;
                ALUControlE <= 0;
                ALUSrcE <= 0;
                RegDstE <= 0;
                BranchE <= 0;
                
                // Data
                RsData <= 0;
                RtData <= 0;
                RsE <= 0;
                RtE <= 0;
                RdE <= 0;
                SignImmE <= 0;
                end
        else if(clear)
        begin
            // Only clear signal which can change architectural state or update memory enough
            // Guranteed by clearing all signals just to be safe
            // handle control unit signals
            RegWriteE <= 0;
            MemtoRegE <= 0;
            MemWriteE <= 0;
            ALUControlE <= 0;
            ALUSrcE <= 0;
            RegDstE <= 0;
            BranchE <= 0;

            // handle registers
            RsE <= 0;
            RtE <= 0;
            RdE <= 0;

            // sign extended immediate
            SignImmE <= 0;

            // propagate PC
            PCPlus4E <= 0;
        end
        else
                begin
                // Control signals
                RegWriteE <= RegWriteD;
                MemtoRegE <= MemtoRegD;
                MemWriteE <= MemWriteD;
                ALUControlE <= ALUControlD;
                ALUSrcE <= ALUSrcD;
                RegDstE <= RegDstD;
                BranchE <= BranchD;
                
                // Data
                RsData <= RD1;
                RtData <= RD2;
                RsE <= RsD;
                RtE <= RtD;
                RdE <= RdD;
                SignImmE <= SignImmD;
                // propagate PC
                PCPlus4E <= PCPlus4D;
                end
         end

endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 01.12.2022 04:32:30
// Design Name: 
// Module Name: alu
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            3'b100: result = a >> b;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule


module PipeEtoM(input logic clk, reset,
                input logic [4:0] WriteRegE,
                input logic [31:0]ALUOutE,
                input logic RegWriteE, MemtoRegE, MemWriteE,
                input logic [31:0] WriteDataE,
                output logic [31:0]ALUOutM,
                output logic [31:0]WriteDataM,
                output logic [4:0] WriteRegM,
                output logic RegWriteM, MemtoRegM, MemWriteM
                 );
        always_ff @(posedge clk, posedge reset)
          if(reset)
                begin
                // Control signals indicated
                RegWriteM <= 0;
                MemWriteM <= 0;
                ALUOutM <= 0;
                MemtoRegM <= 0;
                WriteDataM <= 0;
                WriteRegM <= 0;
                // Data
                end
            else
                begin
                ALUOutM <= ALUOutE;
                WriteRegM <= WriteRegE;
                WriteDataM <= WriteDataE;
                MemtoRegM <= MemtoRegE;
                MemWriteM <= MemWriteE;
                RegWriteM <= RegWriteE;
                end
                  
endmodule

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module HazardUnit( input logic RegWriteW, BranchD,
                input logic [4:0] WriteRegW, WriteRegE,
                input logic RegWriteM,MemtoRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemtoRegE,
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF,ForwardAD, ForwardBD
                 ); // Add or remove input-outputs if necessary
                 
                 logic lwstall;
       
	// ********************************************************************
	// Here, write equations for the Hazard Logic.
	// If you have troubles, please study pages ~420-430 in your book.
	// ********************************************************************
	always_comb 
	begin
	   if ((rsE != 0) & (rsE == WriteRegM) & RegWriteM)
        begin
         ForwardAE = 2'b10;
        end
        else if ((rsE != 0) & (rsE == WriteRegW) & RegWriteW)
        begin
            ForwardAE = 2'b01;
        end
        else
        begin
            ForwardAE = 2'b00;
        end  
         
         
        if ((rtE != 0) & (rtE == WriteRegM) & RegWriteM)
        begin
         ForwardBE = 2'b10;
        end
        else if ((rtE != 0) & (rtE == WriteRegW) & RegWriteW)
        begin
            ForwardBE = 2'b01;
        end
        else
        begin
            ForwardBE = 2'b00;
        end     
        
        lwstall <= ((rsD== rtE) | (rtD== rtE)) & MemtoRegE;
        StallF <= lwstall;
        StallD <= lwstall;
        FlushE <= lwstall;
        ForwardAD <= ((rsD != 0) & (rsD == WriteRegM)) & (RegWriteM);
        ForwardBD <= ((rtD != 0) & (rtD == WriteRegM)) & (RegWriteM);      
        end
	
	
  
endmodule