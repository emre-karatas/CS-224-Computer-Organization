CS224
Lab 01
Section 03
Emre Karata≈ü
22001641
06.10.2022

----Simple Program----
##	a0 - points to the string
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start 

__start:		# execution starts here
	la $a0,str	# put string address into a0
	li $v0,4	# system call to print
	syscall		#   out a string

	li $v0,10  # system call to exit
	syscall	#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
str:	.asciiz "Hello Soheil!"
n:	.word	10

##
## end of file Program1.asm

----Celcius to Fahreneit----
##  converts to Fahrenheit, prints the result.
##
##	v0 - reads in Celsius
##	t0 - holds Fahrenheit result
##	a0 - points to output strings
##

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
	.globl __start	

__start:
	la $a0,prompt	# output prompt message on terminal
	li $v0,4	# syscall 4 prints the string
	syscall

	li $v0, 5	# syscall 5 reads an integer
	syscall

	mul $t0,$v0,9	# to convert,multiply by 9,
	div $t0,$t0,5	# divide by 5, then
	add $t0,$t0,32	# add 32

	la $a0,ans1	# print string before result
	li $v0,4
	syscall

	move $a0,$t0	# print integer result
	li $v0,1		# using syscall 1
	syscall

	la $a0,endl	# system call to print
	li $v0,4		# out a newline
	syscall

	li $v0,10		# system call to exit
	syscall		#    bye bye


#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
prompt:	.asciiz "Enter temperature (Celsius): "
ans1:	.asciiz "The temperature in Fahrenheit is "
endl:	.asciiz "\n"

##
## end of file Program2.asm

----Fibonacci----
##
##	Program3.asm is a loop implementation
##	of the Fibonacci function
##        

#################################
#					 	#
#		text segment		#
#						#
#################################

	.text		
.globl __start
 
__start:		# execution starts here
	lw $a0,seven	# to calculate fib(7)
	jal fib 	# call fib
	move $a0,$v0	# print result
	li $v0, 1
	syscall

	li $v0,4
	la $a0,endl	# print newline
	syscall

	li $v0,10
	syscall		# bye bye

#------------------------------------------------


fib:	move $v0,$a0	# initialise last element
	blt $a0,2,done	# fib(0)=0, fib(1)=1

	li $t0,0	# second last element
	li $v0,1	# last element

loop:	add $t1,$t0,$v0	# get next value
	move $t0,$v0	# update second last
	move $v0,$t1	# update last element
	sub $a0,$a0,1	# decrement count
	bgt $a0,1,loop	# exit loop when count=0
done:	jr $ra

#################################
#					 	#
#     	 data segment		#
#						#
#################################

	.data
endl:	.asciiz "\n"
seven: .word 7

##
## end of Program3.asm

----Mathematical Calculations----
.data

	questionValueA : .asciiz "Enter A value: "
	questionValueB: .asciiz "Enter B value: "
	questionValueC: .asciiz "Enter C value: "
	a: .word 0
	b: .word 0
	c: .word 0
	divisionResult: .word 0
	mod: .word
	remainder: .word 0
	result: .asciiz "x =  " 
	prompt : .asciiz "Solution of x = (2*a*b)/c )*(a-c) \n"
	constant: .word 2
	errorMsg : .asciiz "C value cannot be 0. Division by 0 error. Enter C value again: "
	newLine: .asciiz "\n"
	
.text

process:
	#prompt 
	li $v0,4
	la $a0,prompt
	syscall
	
	#getting user input A
	li $v0,4
	la $a0,questionValueA
	syscall
	li $v0,5
	syscall
	sw $v0,a
	
	#getting user input B
	li $v0,4
	la $a0,questionValueB
	syscall
	li $v0,5
	syscall
	sw $v0,b
	
	#getting user input C
	li $v0,4
	la $a0,questionValueC
	syscall
	li $v0,5
	syscall
	sw $v0,c
	lw $t2,c
	
	#error part 
	beq $t2,$zero,error
	
	#newline
	li $v0,4
	la $a0,newLine
	syscall
	
	j operation
	
	operation:
	#load values
	lw $t0,a
	lw $t1,b
	lw $t2,c
	lw $t3,constant
	
	 
	#multiplication process ( 2* a)
	mult $t3,$t0
	mflo $t4
	
	#multiplication process #2 ( 2*a*b)
	mult $t4,$t1
	mflo $t5
	
	#division by c 
	div $t5,$t2
	mflo $t6
	
	#subtraction (a-c)
	sub $t7,$t0,$t2
	
	#final multiplication
	mult $t7,$t6
	mflo $t8
	
	
	#outputting prompt of result
	li $v0,4
	la $a0,result
	syscall
	
	#move to the a0 register
	move $a0,$t8
	
	#outputting the result
	li $v0,1
	syscall
	
	#exit
	li $v0,10
	syscall
error :
	#error message
	li $v0,4
	la $a0,errorMsg
	syscall
	
	#input getting
	li $v0,5
	syscall
	sw $v0,c
	
	jal operation
	
	


----Simple Menu involves loop----

.data
	array : .space 400
	question: .asciiz "\nEnter array size: (max 100) "
	arraySize: .word 0
	opening: .asciiz "----Simple Menu Involves Loop----"
	menu: .asciiz "Select one of options: \n 1-Summation of numbers greater than entered input \n 2-Finding Summation of odd and even numbers and displaying \n 3-Display number of occurences of the array elements divisible by certain input number \n 4-Quit \n"
	optionPrompt: .asciiz "Enter your option: "
	directive: .asciiz "Enter the values one by one: "
	option: .word 0
	newLine: .asciiz "\n"
	option1Prompt: .asciiz "Enter the value : "
	sum1Option: .word 0
	opt1Result: .asciiz "Sum is: "
	opt2SumOdd: .asciiz "Sum of odd array elements is: "
	opt2SumEven: .asciiz "Sum of even array elements is: "
	opt3Prompt: .asciiz "Number of occurences of numbers divisible by "
	opt3Result: .asciiz " is: " 
.text
main:
	#opening message
	li $v0,4
	la $a0,opening
	syscall	
	
	#array loading
	la $t0,array
	#counter = 0
	addi $t1,$zero,0 
	
	#printing
	li $v0,4
	la $a0,question
	syscall	
	
	#getting the input from user
	li $v0, 5
	syscall
	sw $v0,arraySize
	
	#directive input
	li $v0,4
	la $a0,directive
	syscall
	
	#newLine character
	li $v0,4
	la $a0,newLine
	syscall
	
	#starting loop
	bgt $v0,$zero,loop
	
loop: 
	#getting array inputs
	lw $t2,arraySize
	li $v0,5
	syscall
	sw $v0,0($t0)
	
	
	addi $t0,$t0,4
	addi $t1,$t1,1
	
	#loop condition
	blt $t1,$t2,loop
	beq $t1,$t2,menuDisplaying
	jr $ra
menuDisplaying:
	
	#menu prompt
	li $v0,4
	la $a0,menu
	syscall
	
	#option selection prompt
	li $v0,4
	la $a0,optionPrompt
	syscall
	
	#option getting
	li $v0,5
	syscall
	sw $v0,option
	
	#move to register
	move $t3,$v0
	
	#selections
	beq $t3,1,option1
	beq $t3,2,option2
	beq $t3,3,option3
	beq $t3,4,exit
	
	li $v0,10
	syscall
	jr $ra
	
option1:
	# counter = 0
	addi $t1,$zero,0
	#sum = 0
	addi $t4,$zero,0
	
	#loading array
	la $s0,array
	#loading array size
	lw $t2, arraySize
	
	#prompt outputting
	li $v0,4
	la $a0,option1Prompt
	syscall
	
	#option outputting
	li $v0,5
	syscall
	sw $v0,sum1Option
	
	#move 
	move $t6,$v0
	
	opt1Loop:
		#load array index calues
		lw $sp,0($s0)
		move $t5,$sp
		
		#increment the pointer	
		addi $s0,$s0,4
		
		#if element is bigger add it
		bgt $t5,$t6,addition
		#else skip
		ble $t5,$t6,skip
		addition:
			# t4 = sum
			add $t4,$t4,$t5
			#add counter
			addi $t1,$t1,1
			#add pointer 4 bytes
			addi $t5,$t5,4
			#loop statements
			beq $t1,$t2,done
			bne $t1,$t2,opt1Loop
		skip:
			#add pointer 4 bytes
			addi $t5,$t5,4
			#add counter 1
			addi $t1,$t1,1
			#loop conditions
			bne $t1,$t2,opt1Loop
			beq $t1,$t2,done
			jr $ra
	done:	
		#sum prompt
		li $v0,4
		la $a0,opt1Result
		syscall
		#move
		move $a0,$t4
		#print the sum
		li $v0,1
		syscall
		
		#print new line
		li $v0,4
		la $a0,newLine
		syscall
		
		jal menuSelection
		
	
	

option2:
	#even 
	addi $t3,$zero,0
	#odd 
	addi $t4,$zero,1
	#odd negative
	addi $s2,$zero,-1
	
	#2 constant
	addi $t9,$zero,2
	
	#odd sum 
	addi $t7,$zero,0
	
	#even sum
	addi $t8,$zero,0
	
	#counter
	addi $t1,$zero,0
	
	#loading array
	la $s0,array
	#loading array size
	lw $t2, arraySize
	opt2Loop:
		#load the array
		lw $sp,0($s0)
		move $t5,$sp
		
		#move to next register
		addi $s0,$s0,4
		
		#division
		div $t5,$t9
		#remainder
		mfhi $t6
		
		#go to even 
		beq $t6,$t3,even
		#go to odd
		beq $t6,$t4,odd
		beq $t6,$s2,odd
	even:
		#increment count
		addi $t1,$t1,1
		#sum
		add $t8,$t8,$t5
		#loop condition
		beq $t1,$t2,print
		bne $t1,$t2,opt2Loop
		
	odd:
		#increment count
		addi $t1,$t1,1
		#sum 
		add $t7,$t7,$t5
		#loop condition
		beq $t1,$t2,print
		bne $t1,$t2,opt2Loop
	print:
	
	#odd sum prompt
	li $v0,4
	la $a0,opt2SumOdd
	syscall
	
	#sum printing
	move $a0,$t7
	li $v0,1 
	syscall
	
	#newline 
	li $v0,4
	la $a0,newLine
	syscall
	
	#even prompt sum
	li $v0,4
	la $a0,opt2SumEven
	syscall
	
	#even sum
	move $a0,$t8
	li $v0,1
	syscall
	
	li $v0,4
	la $a0,newLine
	syscall
	
	#option selection prompt
	jal menuSelection
	
	

option3:
	#loading array
	la $s0,array
	
	#remainder setting zero
	addi $t5,$zero,0
	
	#occurence counter = 0
	addi $t7,$zero,0
	
	#loop counter
	addi $t8,$zero,0
	
	#input prompt
	li $v0,4
	la $a0, option1Prompt
	syscall
	
	#getting input from user
	li $v0,5
	syscall
	move $t4,$v0
	
	#loading arraySize
	lw $t2,arraySize
	
	opt3Loop:
		#load the array
		lw $sp,0($s0)
		move $t5,$sp
		
		#move to next register
		addi $s0,$s0,4
		
		#division
		div $t5,$t4
		
		#remainder
		mfhi $t6
		
		#counter
		addi $t8,$t8,1
		
		#loop conditions
		beq $t6,$zero,occured
		beq $t8,$t2,done3
		bne $t6,$zero,opt3Loop
	
	occured:
		#counting occurences
		addi $t7,$t7,1
		bne $t8,$t2,opt3Loop
		beq $t8,$t2,done3
		
	done3:
	#prompt
	li $v0,4
	la $a0,opt3Prompt
	syscall
	
	#entered number
	move $a0,$t4
	li $v0,1
	syscall
	
	#prompt #2
	li $v0,4
	la $a0,opt3Result
	syscall
	
	#result
	move $a0,$t7
	li $v0,1
	syscall
	
	#newline
	li $v0,4
	la $a0,newLine
	syscall
	
	
	jal menuSelection
	

menuSelection:
	#option selection prompt
	li $v0,4
	la $a0,optionPrompt
	syscall
	
	#option outputting
	li $v0,5
	syscall
	sw $v0,sum1Option
	#move 
	move $t3,$v0
	#selections
	beq $t3,1,option1
	beq $t3,2,option2
	beq $t3,3,option3
	beq $t3,4,exit
		
exit:
	li $v0,10
	syscall
	jr $ra